name: Build scto

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      target_arch:
        required: true
        type: string
      target_triple:
        required: true
        type: string

jobs:
  build:
    name: Build SDK for ${{ inputs.target_arch }}
    runs-on: ubuntu-24.04
    env:
      ZIG_TARGET: ${{ inputs.target_triple }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Zig
        uses: mlugg/setup-zig@v2
        with:
          version: 0.14.1
          use-cache: false

      - name: Setup Zig Toolchain
        run: |
          cd ${{ github.workspace }}
          git clone https://github.com/${{ github.repository_owner }}/zig-as-llvm
          cp -R ${PWD}/patches/zig/* $(whereis zig | awk '{print $2}' | xargs dirname)

      - name: Get Sources
        run: sed -i 's/"35\.0\.2"/"${{ inputs.version }}"/g' ${PWD}/CMakeLists.txt ${PWD}/patches/misc/platform_tools_version.h && python get_source.py --tags "platform-tools-${{ inputs.version }}"

      - name: Install Dependencies
        run: sudo apt update && sudo apt install -y ninja-build autogen autoconf autoconf-archive m4 libtool build-essential

      - name: Build Extra Dependencies
        run: |
          if ! test -f "${PROTOBUF}"; then
              patch -up1 <"${{ github.workspace }}/patches/protobuf_CMakeLists.txt.patch"
              BUILD="${{ github.workspace }}/src/protobuf/build"
              rm -rf "${BUILD}" && mkdir -p "${BUILD}"
              cmake -S"${{ github.workspace }}/src/protobuf" -B"${BUILD}" -GNinja -Dprotobuf_BUILD_TESTS=OFF
              ninja -C "${BUILD}" -j"$(nproc --all)"
          fi

          TOOLCHAIN="${{ github.workspace }}/zig-as-llvm"
          export CC=${TOOLCHAIN}/bin/cc
          export CXX=${TOOLCHAIN}/bin/c++
          export CFLAGS="-fstack-protector-strong -fsanitize=undefined"
          export CXXFLAGS="-fstack-protector-strong -fsanitize=undefined"
          export LD=${TOOLCHAIN}/bin/ld
          export OBJCOPY=${TOOLCHAIN}/bin/objcopy
          export AR=${TOOLCHAIN}/bin/ar
          export STRIP=${TOOLCHAIN}/bin/strip

          curl -LkSs https://github.com/madler/zlib/releases/download/v1.3.1/zlib-1.3.1.tar.xz | xz -d | tar -x
          cd zlib-1.3.1
          ./configure --prefix="$(pwd)/../extrabuild" --static
          make -j"$(nproc --all)" install
          cd ..
          curl -LkSs https://www.sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz | gzip -d | tar -x
          cd bzip2-1.0.8
          make CC="$CC" AR="$AR" PREFIX="$(pwd)/../extrabuild" CFLAGS="$CFLAGS -static" LDFLAGS="-static" install
          cd ..

      - name: Apply Patches
        run: |
          sed -i '/};/ a\
          #ifndef TEMP_FAILURE_RETRY\
          #define TEMP_FAILURE_RETRY(expression) (({ long int __result; do __result = (long int)(expression); while (__result == -1 && errno == EINTR); __result; }))\
          #endif\
          #ifndef PAGE_SIZE\
          #define PAGE_SIZE 4096\
          #endif' ${PWD}/src/logging/liblog/logger.h
          sed -i '/__END_DECLS/i\
          #ifndef TEMP_FAILURE_RETRY\n\
          #define TEMP_FAILURE_RETRY(expression) (({ long int __result; do __result = (long int)(expression); while (__result == -1 && errno == EINTR); __result; }))\n\
          #endif\n' ${PWD}/src/core/libcutils/include/cutils/klog.h
          sed -i '/extern "C" {/a\
          #ifndef TEMP_FAILURE_RETRY\n#define TEMP_FAILURE_RETRY(expression) (({ long int __result; do __result = (long int)(expression); while (__result == -1 && errno == EINTR); __result; }))\n#endif
          ' ${PWD}/src/core/libcutils/uevent.cpp
          sed -i '/struct msghdr hdr = {/,/};/c\
              struct msghdr hdr = {};\
              hdr.msg_name = &addr;\
              hdr.msg_namelen = sizeof(addr);\
              hdr.msg_iov = &iov;\
              hdr.msg_iovlen = 1;\
              hdr.msg_control = static_cast<void*>(control);\
              hdr.msg_controllen = sizeof(control);
          ' ${PWD}/src/core/libcutils/uevent.cpp
          sed -i '/#include "uio.h"/a #include <atomic>' ${PWD}/src/logging/liblog/logger.h
          sed -i 's/static atomic_int pmsg_fd;/static std::atomic<int> pmsg_fd{0};/' ${PWD}/src/logging/liblog/pmsg_writer.cpp
          sed -i 's|#include <stdatomic.h>|#include <atomic>|' ${PWD}/src/logging/liblog/logd_reader.cpp ${PWD}/src/logging/liblog/logd_writer.cpp ${PWD}/src/logging/liblog/logger.h
          sed -i 's/\batomic_int\b/std::atomic<int>/g' ${PWD}/src/logging/liblog/logger.h
          sed -i 's/^ *atomic_int \([^=;]*\)= *\([^;]*\);/std::atomic<int> \1{\2};/g' ${PWD}/src/logging/liblog/logd_writer.cpp
          sed -i 's/static atomic_int dropped;/static std::atomic<int> dropped{0};/' ${PWD}/src/logging/liblog/logd_writer.cpp
          sed -i 's/\bmemory_order_relaxed\b/std::memory_order_relaxed/g' ${PWD}/src/logging/liblog/logd_writer.cpp

          find ${PWD}/src -type f \( -name "*.c" -o -name "*.cpp" -o -name "*.h" \) -exec sed -i '/#include <sys\/cdefs.h>/c\
          #ifdef __cplusplus\
          #ifndef __GLIBC__\
          #define __BEGIN_DECLS extern "C" {\
          #define __END_DECLS }\
          #endif\
          #else\
          #ifndef __GLIBC__\
          #define __BEGIN_DECLS\
          #define __END_DECLS\
          #endif\
          #endif' {} +

          sed -i 's/__BEGIN_DECLS/#ifdef __cplusplus\nextern "C" {\n#endif/g; s/__END_DECLS/#ifdef __cplusplus\n}\n#endif/g' ${PWD}/src/core/libpackagelistparser/include/packagelistparser/packagelistparser.h

          sed -i '/#include <sys\/limits.h>/d; /#include <log\/log.h>/a\
          #ifndef GID_MAX\n#define GID_MAX 2147483647\n#endif\n\
          #ifndef UID_MAX\n#define UID_MAX 2147483647\n#endif' ${PWD}/src/core/libpackagelistparser/packagelistparser.cpp

          sed -i 's/std::vector<const StringPiece>/std::vector<StringPiece>/g' ${PWD}/src/base/tools/aapt2/util/Files.cpp

          sed -i '/#define LOG_TAG "cutils-trace"/a\
          #ifndef PROP_NAME_MAX\
          #define PROP_NAME_MAX 32\
          #endif
          ' ${PWD}/src/core/libcutils/trace-dev.inc

          # fml
          if [[ "${{ inputs.target_triple }}" == "riscv32-linux-sct" ]]; then
            sed -i 's/^\([[:space:]]*\)static_assert(std::atomic<.*>::is_always_lock_free);/\1\/\/ &/' ${PWD}/src/art/libartbase/base/metrics/metrics.h
          fi

          # fml 2
          sed -i '/# Set definitions and sources for ARM./i\
          if(TARGET_ARCH MATCHES "^(thumb|thumbeb)$")\
              add_definitions(-DPNG_ARM_NEON_OPT=0)\
              add_definitions(-DPNG_ARM_NEON_IMPLEMENTATION=0)\
          endif()
          ' ${PWD}/src/libpng/CMakeLists.txt
          sed -i '/^namespace art {/i\
          \// see aosp/art/build/art.go\
          \// We need larger stack overflow guards for ASAN, as the compiled code will hav\
          \// larger frame sizes. For simplicity, just use global not-target-specific cflags.\
          \// Note: We increase this for both debug and non-debug, as the overflow gap will\
          \//       be compiled into managed code. We always preopt (and build core images) with\
          \//       the debug version. So make the gap consistent (and adjust for the worst).\
          \
          /*\
          if len(ctx.Config().SanitizeDevice()) > 0 || len(ctx.Config().SanitizeHost()) > 0 {\
              cflags = append(cflags,\
                  "-DART_STACK_OVERFLOW_GAP_arm=8192",\
                  "-DART_STACK_OVERFLOW_GAP_arm64=16384",\
                  "-DART_STACK_OVERFLOW_GAP_riscv64=16384",\
                  "-DART_STACK_OVERFLOW_GAP_x86=16384",\
                  "-DART_STACK_OVERFLOW_GAP_x86_64=20480")\
          } else {\
              cflags = append(cflags,\
                  "-DART_STACK_OVERFLOW_GAP_arm=8192",\
                  "-DART_STACK_OVERFLOW_GAP_arm64=8192",\
                  "-DART_STACK_OVERFLOW_GAP_riscv64=8192",\
                  "-DART_STACK_OVERFLOW_GAP_x86=8192",\
                  "-DART_STACK_OVERFLOW_GAP_x86_64=8192")\
          }\
          */\
          \
          #define ART_STACK_OVERFLOW_GAP_arm 16384\
          #define ART_STACK_OVERFLOW_GAP_arm64 16384\
          #define ART_STACK_OVERFLOW_GAP_riscv64 16384\
          #define ART_STACK_OVERFLOW_GAP_x86 16384\
          #define ART_STACK_OVERFLOW_GAP_x86_64 20480\
          #define ART_STACK_OVERFLOW_GAP_loongarch64 16384\
          #define ART_STACK_OVERFLOW_GAP_powerpc 16384\
          #define ART_STACK_OVERFLOW_GAP_s390x 16384\
          \
          \// see aosp/art/build/art.go\
          \// default frame size limit: 1736\
          \// device limit: 7400\
          \// host limit: 10000\
          #define ART_FRAME_SIZE_LIMIT 10000' ${PWD}/src/art/libartbase/arch/instruction_set.h

          sed -i '/#include "os.h"/a #include <sys/cachectl.h>' ${PWD}/src/art/libartbase/base/utils.cc

          sed -i '/int r = cacheflush(start, limit, kCacheFlushFlags);/{
          s/.*/#if defined(__arm__) \&\& !defined(__aarch64__)\
          \
            void* addr = reinterpret_cast<void*>(start);\
            int size = static_cast<int>(limit - start);\
            int r = cacheflush(addr, size, kCacheFlushFlags);\
          #else\
            int r = cacheflush(start, limit, kCacheFlushFlags);\
          #endif/
          }' ${PWD}/src/art/libartbase/base/utils.cc

          sed -i '/#if __has_feature(cxx_exceptions)/,/^#endif/ c\using Task = std::packaged_task<void()>;' ${PWD}/src/openscreen/platform/api/task_runner.h
          
          # fml 3
          sed -i '/^dex::ProtoIndex DexFile::GetProtoIndexForCallSite(uint32_t call_site_idx) const {/,/^.*}[[:space:]]*$/ {
            /^.*}[[:space:]]*$/ s/$/ \/\/__INSERT_HERE__/
          }' ${PWD}/src/art/libdexfile/dex/dex_file.cc
          sed -i '/\/\/__INSERT_HERE__/a\
          \
          std::ostream& operator<<(std::ostream& os, EncodedArrayValueIterator::ValueType rhs) {\
            switch (rhs) {\
              case EncodedArrayValueIterator::kByte: os << "Byte"; break;\
              case EncodedArrayValueIterator::kShort: os << "Short"; break;\
              case EncodedArrayValueIterator::kChar: os << "Char"; break;\
              case EncodedArrayValueIterator::kInt: os << "Int"; break;\
              case EncodedArrayValueIterator::kLong: os << "Long"; break;\
              case EncodedArrayValueIterator::kFloat: os << "Float"; break;\
              case EncodedArrayValueIterator::kDouble: os << "Double"; break;\
              case EncodedArrayValueIterator::kMethodType: os << "MethodType"; break;\
              case EncodedArrayValueIterator::kMethodHandle: os << "MethodHandle"; break;\
              case EncodedArrayValueIterator::kString: os << "String"; break;\
              case EncodedArrayValueIterator::kType: os << "Type"; break;\
              case EncodedArrayValueIterator::kField: os << "Field"; break;\
              case EncodedArrayValueIterator::kMethod: os << "Method"; break;\
              case EncodedArrayValueIterator::kEnum: os << "Enum"; break;\
              case EncodedArrayValueIterator::kArray: os << "Array"; break;\
              case EncodedArrayValueIterator::kAnnotation: os << "Annotation"; break;\
              case EncodedArrayValueIterator::kNull: os << "Null"; break;\
              case EncodedArrayValueIterator::kBoolean: os << "Boolean"; break;\
              default: os << "EncodedArrayValueIterator::ValueType[" << static_cast<int>(rhs) << "]"; break;\
            }\
            return os;\
          }\
          ' ${PWD}/src/art/libdexfile/dex/dex_file.cc
          sed -i 's/ \/\/__INSERT_HERE__//' ${PWD}/src/art/libdexfile/dex/dex_file.cc

      - name: Build Android SDK
        shell: bash
        run: |
          TOOLCHAIN="${{ github.workspace }}/zig-as-llvm"
          export CC=${TOOLCHAIN}/bin/cc
          export CXX=${TOOLCHAIN}/bin/c++
          export CFLAGS="-fstack-protector-strong -fsanitize=undefined -Wno-error=date-time -Doff64_t=off_t -Dmmap64=mmap -Dlseek64=lseek -Dpread64=pread -Dpwrite64=pwrite -Dftruncate64=ftruncate -DANDROID_HOST_MUSL -static"
          export CXXFLAGS="-fstack-protector-strong -fsanitize=undefined -Wno-error=date-time -Doff64_t=off_t -Dmmap64=mmap -Dlseek64=lseek -Dpread64=pread -Dpwrite64=pwrite -Dftruncate64=ftruncate -DANDROID_HOST_MUSL -static"
          export LD=${TOOLCHAIN}/bin/ld
          export OBJCOPY=${TOOLCHAIN}/bin/objcopy
          export AR=${TOOLCHAIN}/bin/ar
          export STRIP=${TOOLCHAIN}/bin/strip

          format_time() {
              local T=$1
              local H=$((T/3600))
              local M=$(( (T%3600)/60 ))
              local S=$((T%60))
              if [ "$H" -gt 0 ]; then
                  echo "${H}h${M}m${S}s"
              elif [ "$M" -gt 0 ]; then
                  echo "${M}m${S}s"
              else
                  echo "${S}s"
              fi
          }

          package_dir() {
              local src="$1"
              local dest="$2"
              (cd "$src" && zip -r "$dest" .)
          }

          complete_build() {
              local build_dir="$1"

              declare -a build_tools=(aapt aapt2 aidl zipalign dexdump split-select)
              declare -a platform_tools=(adb fastboot sqlite3 etc1tool hprof-conv e2fsdroid sload_f2fs mke2fs make_f2fs make_f2fs_casefold dmtracedump)
              declare -a other_tools=(veridex)

              for tool in "${build_tools[@]}"; do
                  if [ -f "$binary_dir/$tool" ]; then
                      "$STRIP" "$binary_dir/$tool"
                  fi
               done

              for tool in "${platform_tools[@]}"; do
                  if [ -f "$binary_dir/$tool" ]; then
                      "$STRIP" "$binary_dir/$tool"
                  fi
              done

              for tool in "${other_tools[@]}"; do
                  if [ -f "$binary_dir/$tool" ]; then
                      "$STRIP" "$binary_dir/$tool"
                  fi
              done
          }

          build() {
              local build_dir="$1"
              local jobs="$2"
              local target="$3"
              local protoc="$4"

              cmake -GNinja \
                  -B "$build_dir" \
                  -DCMAKE_SYSTEM_NAME=Linux \
                  -DCMAKE_CROSSCOMPILING=True \
                  -DCMAKE_SYSTEM_PROCESSOR=${{ inputs.target_arch }} \
                  -DCMAKE_PREFIX_PATH="$(pwd)/extrabuild" \
                  -DCMAKE_C_COMPILER="$CC" \
                  -DCMAKE_CXX_COMPILER="$CXX" \
                  -DCMAKE_ASM_COMPILER="$CC" \
                  -DCMAKE_LINKER="$LD" \
                  -DCMAKE_OBJCOPY="$OBJCOPY" \
                  -DCMAKE_AR="$AR" \
                  -DCMAKE_STRIP="$STRIP" \
                  -DCMAKE_C_FLAGS="$CFLAGS" \
                  -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
                  -Dprotobuf_BUILD_TESTS=OFF \
                  -DABSL_PROPAGATE_CXX_STD=ON \
                  -DCMAKE_BUILD_TYPE=MinSizeRel \
                  -DPROTOC_PATH="$protoc"

              local start_time=$(date +%s)

              if [ "$target" = "all" ]; then
                  ninja -C "$build_dir" -j "$jobs"
              else
                  ninja -C "$build_dir" "$target" -j "$jobs"
              fi

              if [ $? -ne 0 ]; then
                  echo -e "\033[1;31mBuild failed!\033[0m"
                  exit 1
              fi

              complete_build "$build_dir"

              local end_time=$(date +%s)
              local duration=$((end_time - start_time))
              echo -e "\033[1;32mbuild success cost time: $(format_time "$duration")\033[0m"
          }

          build "build" "$(nproc)" "all" "${{github.workspace}}/src/protobuf/build/protoc"

          mkdir ~/sdk
          mv build/bin ~/sdk/build-${{ inputs.target_triple }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ inputs.target_triple }}
          path: ~/sdk/*
